//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer perDraw
{
    float4x4 gWorldViewProj;            // Offset:    0, size:   64
    float   gGlobalTime;                // Offset:   64, size:    4
    float   gElapsedTime;               // Offset:   68, size:    4
    float4  gGravity;                   // Offset:   80, size:   16
    float   gBloodParticleSize = 0.0199999996;// Offset:   96, size:    4
}

cbuffer cFixed
{
    float   gLifeTimes[9] = { 0, 1, 3, 2, 1, 1, 1, 0.800000012, 0.800000012 };// Offset:    0, size:  132
    float3  gPositions[4] = { -1, 1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0 };// Offset:  144, size:   60
    float2  gTexCoords[4] = { 0, 0, 1, 0, 0, 1, 1, 1 };// Offset:  208, size:   56
}

//
// 7 local object(s)
//
Texture2DArray gDiffuseMaps;
Texture1D gtexRandom;
SamplerState gSamPoint
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(WRAP /* 1 */);
};
BlendState AdditiveBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[1] = uint(ZERO /* 1 */);
    DestBlendAlpha[2] = uint(ZERO /* 1 */);
    DestBlendAlpha[3] = uint(ZERO /* 1 */);
    DestBlendAlpha[4] = uint(ZERO /* 1 */);
    DestBlendAlpha[5] = uint(ZERO /* 1 */);
    DestBlendAlpha[6] = uint(ZERO /* 1 */);
    DestBlendAlpha[7] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
RasterizerState rastCullNone
{
    CullMode = uint(NONE /* 1 */);
};
GeometryShader gsStreamOut = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer perDraw
        // {
        //
        //   float4x4 gWorldViewProj;           // Offset:    0 Size:    64 [unused]
        //   float gGlobalTime;                 // Offset:   64 Size:     4
        //   float gElapsedTime;                // Offset:   68 Size:     4
        //   float4 gGravity;                   // Offset:   80 Size:    16
        //   float gBloodParticleSize;          // Offset:   96 Size:     4
        //      = 0x3ca3d70a 
        //
        // }
        //
        // cbuffer cFixed
        // {
        //
        //   float gLifeTimes[9];               // Offset:    0 Size:   132
        //      = 0x00000000 0x00000000 0x00000000 0x00000000 
        //        0x3f800000 0x00000000 0x00000000 0x00000000 
        //        0x40400000 0x00000000 0x00000000 0x00000000 
        //        0x40000000 0x00000000 0x00000000 0x00000000 
        //        0x3f800000 0x00000000 0x00000000 0x00000000 
        //        0x3f800000 0x00000000 0x00000000 0x00000000 
        //        0x3f800000 0x00000000 0x00000000 0x00000000 
        //        0x3f4ccccd 0x00000000 0x00000000 0x00000000 
        //        0x3f4ccccd 
        //   float3 gPositions[4];              // Offset:  144 Size:    60 [unused]
        //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
        //        0x3f800000 0x3f800000 0x00000000 0x00000000 
        //        0xbf800000 0xbf800000 0x00000000 0x00000000 
        //        0x3f800000 0xbf800000 0x00000000 
        //   float2 gTexCoords[4];              // Offset:  208 Size:    56 [unused]
        //      = 0x00000000 0x00000000 0x00000000 0x00000000 
        //        0x3f800000 0x00000000 0x00000000 0x00000000 
        //        0x00000000 0x3f800000 0x00000000 0x00000000 
        //        0x3f800000 0x3f800000 
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim Slot Elements
        // ------------------------------ ---------- ------- ----------- ---- --------
        // gSamPoint                         sampler      NA          NA    0        1
        // gtexRandom                        texture  float4          1d    0        1
        // perDraw                           cbuffer      NA          NA    0        1
        // cFixed                            cbuffer      NA          NA    1        1
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyz         0     NONE   float   xyz 
        // TIMER                    0      w        0     NONE   float      w
        // VELOCITY                 0   xy          1     NONE   float   xy  
        // SIZE                     0     zw        1     NONE   float     zw
        // EMITTER_INTERVAL         0   x           2     NONE   float   x   
        // TYPE                     0   x           3     NONE    uint   x   
        // ETYPE                    0    y          3     NONE    uint    y  
        // TEXINDEX                 0     z         3     NONE    uint     z 
        // SV_PrimitiveID           0    N/A   primID   PRIMID    uint    YES
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyz         0     NONE   float   xyz 
        // TIMER                    0      w        0     NONE   float      w
        // VELOCITY                 0   xy          1     NONE   float   xy  
        // SIZE                     0     zw        1     NONE   float     zw
        // EMITTER_INTERVAL         0   x           2     NONE   float   x   
        // TYPE                     0   x           3     NONE    uint   x   
        // ETYPE                    0    y          3     NONE    uint    y  
        // TEXINDEX                 0     z         3     NONE    uint     z 
        //
        gs_4_0
        dcl_constantbuffer cb0[7], immediateIndexed
        dcl_constantbuffer cb1[9], dynamicIndexed
        dcl_sampler s0, mode_default
        dcl_resource_texture1d (float,float,float,float) t0
        dcl_input v[1][0].xyz
        dcl_input v[1][0].w
        dcl_input v[1][1].xy
        dcl_input v[1][1].zw
        dcl_input v[1][2].x
        dcl_input v[1][3].x
        dcl_input v[1][3].y
        dcl_input v[1][3].z
        dcl_input vPrim
        dcl_temps 7
        dcl_inputprimitive point 
        dcl_outputtopology pointlist 
        dcl_output o0.xyz
        dcl_output o0.w
        dcl_output o1.xy
        dcl_output o1.zw
        dcl_output o2.x
        dcl_output o3.x
        dcl_output o3.y
        dcl_output o3.z
        dcl_maxout 32
        //
        // Initial variable locations:
        //   vPrim <- primID; 
        //   m0 <- ParticleOutputStream; 
        //   v[0][0].x <- input[0].pos.x; v[0][0].y <- input[0].pos.y; v[0][0].z <- input[0].pos.z; 
        //   v[0][1].x <- input[0].vel.x; v[0][1].y <- input[0].vel.y; v[0][1].z <- input[0].size.x; v[0][1].w <- input[0].size.y; 
        //   v[0][0].w <- input[0].timer; 
        //   v[0][2].x <- input[0].emitInterval; 
        //   v[0][3].x <- input[0].type; v[0][3].y <- input[0].etype; v[0][3].z <- input[0].texIndex
        //
        #line 400 "G:\Personal\Crusade\Final Src\Common\FX\Particles.fx"
        mov r0.x, l(10)
        ieq r0.x, r0.x, v[0][3].x
        if_nz r0.x
          nop 
          mov r0.xyz, v[0][0].xyzx
          mov r1.xyz, v[0][3].yxzy
          mov r2.xy, v[0][1].xyxx
          mov r2.zw, v[0][1].zzzw
          mov r0.w, v[0][0].w
          mov r1.w, vPrim
          nop 
        
        #line 214
          itof r3.x, l(0)
          ge r0.w, r3.x, r0.w
          if_nz r0.w
            mov r0.w, l(5)
            ieq r0.w, r0.w, r1.x
            if_nz r0.w
              mov r0.w, l(0)  // r0.w <- i
              mov r3.x, r0.w  // r3.x <- i
              loop 
                ilt r3.y, r3.x, l(8)
                breakc_z r3.y
                nop 
                iadd r3.y, r1.y, r3.x
                mov r3.z, l(1)
                ineg r3.z, r3.z
                iadd r3.z, r1.x, r3.z
                imul null, r3.z, r1.w, r3.z
                iadd r3.y, r3.z, r3.y
                utof r3.y, r3.y
        
        #line 132
                add r3.y, r3.y, cb0[4].x
                div r3.y, r3.y, l(300.000000)  // r3.y <- tCoord
                itof r3.z, l(0)
                sample_l r4.xyzw, r3.y, t0.xyzw, s0, r3.z
                mov r4.xyz, r4.xyzx  // r4.x <- <RandomDir return value>.x; r4.y <- <RandomDir return value>.y; r4.z <- <RandomDir return value>.z
        
        #line 219
                dp3 r3.y, r4.xyzx, r4.xyzx
                rsq r3.y, r3.y
                mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- vRandom.x; r3.z <- vRandom.y; r3.w <- vRandom.z
        
        #line 222
                mul r4.xyz, r3.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000)
                add r4.xyz, r0.xyzx, r4.xyzx  // r4.x <- output.pos.x; r4.y <- output.pos.y; r4.z <- output.pos.z
                mul r3.yw, r3.yyyz, l(0.000000, 3.500000, 0.000000, 3.500000)
                mul r5.xy, r2.xyxx, cb0[4].yyyy
                add r3.yw, r3.yyyw, r5.xxxy  // r3.y <- output.vel.x; r3.w <- output.vel.y
                mov r5.xy, r2.zwzz  // r5.x <- output.size.x; r5.y <- output.size.y
                mul r3.z, r3.z, l(0.500000)
                add r3.z, r3.z, cb1[r1.x + 0].x  // r3.z <- output.timer
                mov r4.w, l(1.000000)  // r4.w <- output.emitInterval
                mov r5.z, r1.x  // r5.z <- output.type
                mov r5.w, r1.x  // r5.w <- output.etype
                mov r6.x, r1.z  // r6.x <- output.texIndex
        
        #line 235
                mov o0.xyz, r4.xyzx
                mov o0.w, r3.z
                mov o1.xy, r3.ywyy
                mov o1.zw, r5.xxxy
                mov o2.x, r4.w
                mov o3.x, r5.z
                mov o3.y, r5.w
                mov o3.z, r6.x
                emit 
                iadd r3.x, r3.x, l(1)
              endloop 
            else 
              mov r0.w, l(6)
              ieq r0.w, r0.w, r1.x
              if_nz r0.w
                mov r0.w, l(0)  // r0.w <- i
                mov r3.x, r0.w  // r3.x <- i
                loop 
                  ilt r3.y, r3.x, l(32)
                  breakc_z r3.y
                  nop 
                  iadd r3.y, r1.y, r3.x
                  mov r3.z, l(1)
                  ineg r3.z, r3.z
                  iadd r3.z, r1.x, r3.z
                  imul null, r3.z, r1.w, r3.z
                  iadd r3.y, r3.z, r3.y
                  utof r3.y, r3.y
        
        #line 132
                  add r3.y, r3.y, cb0[4].x
                  div r3.y, r3.y, l(300.000000)  // r3.y <- tCoord
                  itof r3.z, l(0)
                  sample_l r4.xyzw, r3.y, t0.xyzw, s0, r3.z
                  mov r4.xyz, r4.xyzx  // r4.x <- <RandomDir return value>.x; r4.y <- <RandomDir return value>.y; r4.z <- <RandomDir return value>.z
        
        #line 241
                  dp3 r3.y, r4.xyzx, r4.xyzx
                  rsq r3.y, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- vRandom.x; r3.z <- vRandom.y; r3.w <- vRandom.z
        
        #line 244
                  mul r4.xyz, r3.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000)
                  add r4.xyz, r0.xyzx, r4.xyzx  // r4.x <- output.pos.x; r4.y <- output.pos.y; r4.z <- output.pos.z
                  mul r3.yw, r3.yyyz, l(0.000000, 3.500000, 0.000000, 3.500000)
                  mul r5.xy, r2.xyxx, cb0[4].yyyy
                  add r3.yw, r3.yyyw, r5.xxxy  // r3.y <- output.vel.x; r3.w <- output.vel.y
                  mov r5.xy, r2.zwzz  // r5.x <- output.size.x; r5.y <- output.size.y
                  mul r3.z, r3.z, l(0.500000)
                  add r3.z, r3.z, cb1[r1.x + 0].x  // r3.z <- output.timer
                  mov r4.w, l(1.000000)  // r4.w <- output.emitInterval
                  mov r5.z, r1.x  // r5.z <- output.type
                  mov r5.w, r1.x  // r5.w <- output.etype
                  mov r6.x, r1.z  // r6.x <- output.texIndex
        
        #line 257
                  mov o0.xyz, r4.xyzx
                  mov o0.w, r3.z
                  mov o1.xy, r3.ywyy
                  mov o1.zw, r5.xxxy
                  mov o2.x, r4.w
                  mov o3.x, r5.z
                  mov o3.y, r5.w
                  mov o3.z, r6.x
                  emit 
                  iadd r3.x, r3.x, l(1)
                endloop 
              else 
                mov r0.w, l(7)
                ieq r0.w, r0.w, r1.x
                if_nz r0.w
                  mov r0.w, l(0)  // r0.w <- i
                  mov r3.x, r0.w  // r3.x <- i
                  loop 
                    ilt r3.y, r3.x, l(32)
                    breakc_z r3.y
                    nop 
                    iadd r3.y, r1.y, r3.x
                    iadd r3.y, r1.w, r3.y
                    utof r3.y, r3.y
        
        #line 132
                    add r3.y, r3.y, cb0[4].x
                    div r3.y, r3.y, l(300.000000)  // r3.y <- tCoord
                    itof r3.z, l(0)
                    sample_l r4.xyzw, r3.y, t0.xyzw, s0, r3.z
                    mov r4.xyz, r4.xyzx  // r4.x <- <RandomDir return value>.x; r4.y <- <RandomDir return value>.y; r4.z <- <RandomDir return value>.z
        
        #line 263
                    dp3 r3.y, r4.xyzx, r4.xyzx
                    rsq r3.y, r3.y
                    mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- vRandom.x; r3.z <- vRandom.y; r3.w <- vRandom.z
        
        #line 266
                    mul r4.xyz, r3.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000)
                    add r4.xyz, r0.xyzx, r4.xyzx  // r4.x <- output.pos.x; r4.y <- output.pos.y; r4.z <- output.pos.z
                    mul r3.yw, r3.yyyz, l(0.000000, 3.500000, 0.000000, 3.500000)
                    mul r5.xy, r2.xyxx, cb0[4].yyyy
                    add r3.yw, r3.yyyw, r5.xxxy  // r3.y <- output.vel.x; r3.w <- output.vel.y
                    mov r5.xy, r2.zwzz  // r5.x <- output.size.x; r5.y <- output.size.y
                    mul r3.z, r3.z, l(0.500000)
                    add r3.z, r3.z, cb1[r1.x + 0].x  // r3.z <- output.timer
                    mov r4.w, l(1.000000)  // r4.w <- output.emitInterval
                    mov r5.z, r1.x  // r5.z <- output.type
                    mov r5.w, r1.x  // r5.w <- output.etype
                    mov r6.x, r1.z  // r6.x <- output.texIndex
        
        #line 279
                    mov o0.xyz, r4.xyzx
                    mov o0.w, r3.z
                    mov o1.xy, r3.ywyy
                    mov o1.zw, r5.xxxy
                    mov o2.x, r4.w
                    mov o3.x, r5.z
                    mov o3.y, r5.w
                    mov o3.z, r6.x
                    emit 
                    iadd r3.x, r3.x, l(1)
                  endloop 
                else 
                  mov r0.w, l(8)
                  ieq r0.w, r0.w, r1.x
                  if_nz r0.w
                    mov r0.w, l(0)  // r0.w <- i
                    mov r3.x, r0.w  // r3.x <- i
                    loop 
                      ilt r3.y, r3.x, l(32)
                      breakc_z r3.y
                      nop 
                      iadd r3.y, r1.y, r3.x
                      iadd r3.y, r1.w, r3.y
                      utof r3.y, r3.y
        
        #line 132
                      add r3.y, r3.y, cb0[4].x
                      div r3.y, r3.y, l(300.000000)  // r3.y <- tCoord
                      itof r3.z, l(0)
                      sample_l r4.xyzw, r3.y, t0.xyzw, s0, r3.z
                      mov r4.xyz, r4.xyzx  // r4.x <- <RandomDir return value>.x; r4.y <- <RandomDir return value>.y; r4.z <- <RandomDir return value>.z
        
        #line 285
                      dp3 r3.y, r4.xyzx, r4.xyzx
                      rsq r3.y, r3.y
                      mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- vRandom.x; r3.z <- vRandom.y; r3.w <- vRandom.z
        
        #line 288
                      mul r4.xyz, r3.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000)
                      add r4.xyz, r0.xyzx, r4.xyzx  // r4.x <- output.pos.x; r4.y <- output.pos.y; r4.z <- output.pos.z
                      mul r3.yw, r3.yyyz, l(0.000000, 3.500000, 0.000000, 3.500000)
                      mul r5.xy, r2.xyxx, cb0[4].yyyy
                      add r3.yw, r3.yyyw, r5.xxxy  // r3.y <- output.vel.x; r3.w <- output.vel.y
                      mov r5.xy, r2.zwzz  // r5.x <- output.size.x; r5.y <- output.size.y
                      mul r3.z, r3.z, l(0.500000)
                      add r3.z, r3.z, cb1[r1.x + 0].x  // r3.z <- output.timer
                      mov r4.w, l(1.000000)  // r4.w <- output.emitInterval
                      mov r5.z, r1.x  // r5.z <- output.type
                      mov r5.w, r1.x  // r5.w <- output.etype
                      mov r6.x, r1.z  // r6.x <- output.texIndex
        
        #line 301
                      mov o0.xyz, r4.xyzx
                      mov o0.w, r3.z
                      mov o1.xy, r3.ywyy
                      mov o1.zw, r5.xxxy
                      mov o2.x, r4.w
                      mov o3.x, r5.z
                      mov o3.y, r5.w
                      mov o3.z, r6.x
                      emit 
                      iadd r3.x, r3.x, l(1)
                    endloop 
                  else 
        
        #line 306
                    nop 
                    mov r0.w, l(1)
                    ineg r0.w, r0.w
                    iadd r0.w, r0.w, r1.x
                    imul null, r0.w, r0.w, r1.w
                    iadd r0.w, r0.w, r1.y
                    utof r0.w, r0.w
        
        #line 132
                    add r0.w, r0.w, cb0[4].x
                    div r0.w, r0.w, l(300.000000)  // r0.w <- tCoord
                    itof r1.y, l(0)
                    sample_l r3.xyzw, r0.w, t0.xyzw, s0, r1.y
                    mov r3.xyz, r3.xyzx  // r3.x <- <RandomDir return value>.x; r3.y <- <RandomDir return value>.y; r3.z <- <RandomDir return value>.z
        
        #line 306
                    dp3 r0.w, r3.xyzx, r3.xyzx
                    rsq r0.w, r0.w
                    mul r1.yw, r0.wwww, r3.xxxy  // r1.y <- vRandom.x; r1.w <- vRandom.y
        
        #line 309
                    mov r0.xyz, r0.xyzx  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z
                    mul r2.xy, r2.xyxx, cb0[4].yyyy
                    mul r3.xy, r1.ywyy, l(3.500000, 3.500000, 0.000000, 0.000000)
                    add r2.xy, r2.xyxx, r3.xyxx  // r2.x <- output.vel.x; r2.y <- output.vel.y
                    mov r2.zw, r2.zzzw  // r2.z <- output.size.x; r2.w <- output.size.y
                    mul r0.w, r1.w, l(0.500000)
                    add r0.w, r0.w, cb1[r1.x + 0].x  // r0.w <- output.timer
                    mov r1.y, l(1.000000)  // r1.y <- output.emitInterval
                    mov r1.w, r1.x  // r1.w <- output.type
                    mov r1.x, r1.x  // r1.x <- output.etype
                    mov r1.z, r1.z  // r1.z <- output.texIndex
        
        #line 322
                    mov o0.xyz, r0.xyzx
                    mov o0.w, r0.w
                    mov o1.xy, r2.xyxx
                    mov o1.zw, r2.zzzw
                    mov o2.x, r1.y
                    mov o3.x, r1.w
                    mov o3.y, r1.x
                    mov o3.z, r1.z
                    emit 
                  endif 
                endif 
              endif 
            endif 
          endif 
        
        #line 401
          nop 
        else 
          mov r0.x, l(1)
          ieq r0.x, r0.x, v[0][3].x
          if_nz r0.x
            nop 
            mov r0.xyz, v[0][0].xyzx
            mov r1.xyz, v[0][3].xyzx
            mov r2.xy, v[0][1].xyxx
            mov r0.w, v[0][0].w
            mov r1.w, v[0][2].x
            nop 
        
        #line 330
            itof r2.z, l(0)
            lt r2.z, r2.z, r0.w
            if_nz r2.z
              mul r3.xy, r2.xyxx, cb0[4].yyyy
              mov r3.z, r0.z
              add r0.xyz, r0.xyzx, r3.xyzx
              mul r2.zw, cb0[4].yyyy, cb0[5].xxxy
              add r2.xy, r2.zwzz, r2.xyxx
              mov r2.zw, cb0[6].xxxx  // r2.z <- input.size.x; r2.w <- input.size.y
              mov r3.x, -cb0[4].y
              add r0.w, r0.w, r3.x
              mov o0.xyz, r0.xyzx
              mov o0.w, r0.w
              mov o1.xy, r2.xyxx
              mov o1.zw, r2.zzzw
              mov o2.x, r1.w
              mov o3.xyz, r1.xyzx
              emit 
            endif 
        
        #line 403
            nop 
          else 
            mov r0.x, l(2)
            ieq r0.x, r0.x, v[0][3].x
            if_nz r0.x
              nop 
              mov r0.xyz, v[0][0].xyzx
              mov r1.xyz, v[0][3].xyzx
              mov r2.xy, v[0][1].xyxx
              mov r2.zw, v[0][1].zzzw
              mov r0.w, v[0][0].w
              mov r1.w, v[0][2].x
              nop 
        
        #line 342
              itof r3.x, l(0)
              lt r3.x, r3.x, r0.w
              if_nz r3.x
                mul r3.xy, r2.xyxx, cb0[4].yyyy
                mov r3.z, r0.z
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r3.xy, cb0[4].yyyy, cb0[5].xyxx
                add r2.xy, r2.xyxx, r3.xyxx
                mov r3.x, -cb0[4].y
                add r0.w, r0.w, r3.x
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                mov o1.xy, r2.xyxx
                mov o1.zw, r2.zzzw
                mov o2.x, r1.w
                mov o3.xyz, r1.xyzx
                emit 
              endif 
        
        #line 405
              nop 
            else 
              mov r0.x, l(3)
              ieq r0.x, r0.x, v[0][3].x
              if_nz r0.x
                nop 
                mov r0.xyz, v[0][0].xyzx
                mov r1.xyz, v[0][3].xyzx
                mov r2.xy, v[0][1].xyxx
                mov r2.zw, v[0][1].zzzw
                mov r0.w, v[0][0].w
                mov r1.w, v[0][2].x
                nop 
        
        #line 353
                itof r3.x, l(0)
                lt r3.x, r3.x, r0.w
                if_nz r3.x
                  mul r3.xy, r2.xyxx, cb0[4].yyyy
                  mov r3.z, r0.z
                  add r0.xyz, r0.xyzx, r3.xyzx
                  div r3.xy, cb0[5].xyxx, l(1.500000, 1.500000, 0.000000, 0.000000)
                  mul r3.xy, r3.xyxx, cb0[4].yyyy
                  mov r3.xy, -r3.xyxx
                  add r2.xy, r2.xyxx, r3.xyxx
                  mov r3.x, -cb0[4].y
                  add r0.w, r0.w, r3.x
                  mov o0.xyz, r0.xyzx
                  mov o0.w, r0.w
                  mov o1.xy, r2.xyxx
                  mov o1.zw, r2.zzzw
                  mov o2.x, r1.w
                  mov o3.xyz, r1.xyzx
                  emit 
                endif 
        
        #line 407
                nop 
              else 
                mov r0.x, l(4)
                ieq r0.x, r0.x, v[0][3].x
                if_nz r0.x
                  nop 
                  mov r0.xyz, v[0][0].xyzx
                  mov r1.xyz, v[0][3].xyzx
                  mov r2.xy, v[0][1].xyxx
                  mov r2.zw, v[0][1].zzzw
                  mov r0.w, v[0][0].w
                  mov r1.w, v[0][2].x
                  nop 
        
        #line 364
                  itof r3.x, l(0)
                  lt r3.x, r3.x, r0.w
                  if_nz r3.x
                    mul r3.xy, r2.xyxx, cb0[4].yyyy
                    mov r3.z, r0.z
                    add r0.xyz, r0.xyzx, r3.xyzx
                    mul r3.xy, cb0[4].yyyy, cb0[5].xyxx
                    mov r3.xy, -r3.xyxx
                    add r2.xy, r2.xyxx, r3.xyxx
                    mov r3.x, -cb0[4].y
                    add r0.w, r0.w, r3.x
                    mov o0.xyz, r0.xyzx
                    mov o0.w, r0.w
                    mov o1.xy, r2.xyxx
                    mov o1.zw, r2.zzzw
                    mov o2.x, r1.w
                    mov o3.xyz, r1.xyzx
                    emit 
                  endif 
        
        #line 409
                  nop 
                else 
                  mov r0.x, l(5)
                  ieq r0.x, r0.x, v[0][3].x
                  if_nz r0.x
                    nop 
                    mov r0.xyz, v[0][0].xyzx
                    mov r1.xyz, v[0][3].xyzx
                    mov r2.xy, v[0][1].xyxx
                    mov r2.zw, v[0][1].zzzw
                    mov r0.w, v[0][0].w
                    mov r1.w, v[0][2].x
                    nop 
        
        #line 375
                    itof r3.x, l(0)
                    lt r3.x, r3.x, r0.w
                    if_nz r3.x
                      mul r3.xy, r2.xyxx, cb0[4].yyyy
                      mov r3.z, r0.z
                      add r0.xyz, r0.xyzx, r3.xyzx
                      mul r3.xy, cb0[4].yyyy, cb0[5].xyxx
                      add r2.xy, r2.xyxx, r3.xyxx
                      mov r3.x, -cb0[4].y
                      add r0.w, r0.w, r3.x
                      mov o0.xyz, r0.xyzx
                      mov o0.w, r0.w
                      mov o1.xy, r2.xyxx
                      mov o1.zw, r2.zzzw
                      mov o2.x, r1.w
                      mov o3.xyz, r1.xyzx
                      emit 
                    endif 
        
        #line 411
                    nop 
                  else 
                    mov r0.x, l(6)
                    ieq r0.x, r0.x, v[0][3].x
                    if_nz r0.x
                      nop 
                      mov r0.xyz, v[0][0].xyzx
                      mov r1.xyz, v[0][3].xyzx
                      mov r2.xy, v[0][1].xyxx
                      mov r2.zw, v[0][1].zzzw
                      mov r0.w, v[0][0].w
                      mov r1.w, v[0][2].x
                      nop 
        
        #line 386
                      itof r3.x, l(0)
                      lt r3.x, r3.x, r0.w
                      if_nz r3.x
                        mul r3.xy, r2.xyxx, cb0[4].yyyy
                        mov r3.z, r0.z
                        add r0.xyz, r0.xyzx, r3.xyzx
                        mul r3.xy, cb0[4].yyyy, cb0[5].xyxx
                        add r2.xy, r2.xyxx, r3.xyxx
                        mov r3.x, -cb0[4].y
                        add r0.w, r0.w, r3.x
                        mov o0.xyz, r0.xyzx
                        mov o0.w, r0.w
                        mov o1.xy, r2.xyxx
                        mov o1.zw, r2.zzzw
                        mov o2.x, r1.w
                        mov o3.xyz, r1.xyzx
                        emit 
                      endif 
        
        #line 413
                      nop 
                    else 
                      mov r0.x, l(7)
                      ieq r0.x, r0.x, v[0][3].x
                      if_nz r0.x
                        nop 
                        mov r0.xyz, v[0][0].xyzx
                        mov r1.xyz, v[0][3].xyzx
                        mov r2.xy, v[0][1].xyxx
                        mov r2.zw, v[0][1].zzzw
                        mov r0.w, v[0][0].w
                        mov r1.w, v[0][2].x
                        nop 
        
        #line 353
                        itof r3.x, l(0)
                        lt r3.x, r3.x, r0.w
                        if_nz r3.x
                          mul r3.xy, r2.xyxx, cb0[4].yyyy
                          mov r3.z, r0.z
                          add r0.xyz, r0.xyzx, r3.xyzx
                          div r3.xy, cb0[5].xyxx, l(1.500000, 1.500000, 0.000000, 0.000000)
                          mul r3.xy, r3.xyxx, cb0[4].yyyy
                          mov r3.xy, -r3.xyxx
                          add r2.xy, r2.xyxx, r3.xyxx
                          mov r3.x, -cb0[4].y
                          add r0.w, r0.w, r3.x
                          mov o0.xyz, r0.xyzx
                          mov o0.w, r0.w
                          mov o1.xy, r2.xyxx
                          mov o1.zw, r2.zzzw
                          mov o2.x, r1.w
                          mov o3.xyz, r1.xyzx
                          emit 
                        endif 
        
        #line 415
                        nop 
                      else 
                        mov r0.x, l(8)
                        ieq r0.x, r0.x, v[0][3].x
                        if_nz r0.x
                          nop 
                          mov r0.xyz, v[0][0].xyzx
                          mov r1.xyz, v[0][3].xyzx
                          mov r2.xy, v[0][1].xyxx
                          mov r2.zw, v[0][1].zzzw
                          mov r0.w, v[0][0].w
                          mov r1.w, v[0][2].x
                          nop 
        
        #line 353
                          itof r3.x, l(0)
                          lt r3.x, r3.x, r0.w
                          if_nz r3.x
                            mul r3.xy, r2.xyxx, cb0[4].yyyy
                            mov r3.z, r0.z
                            add r0.xyz, r0.xyzx, r3.xyzx
                            div r3.xy, cb0[5].xyxx, l(1.500000, 1.500000, 0.000000, 0.000000)
                            mul r3.xy, r3.xyxx, cb0[4].yyyy
                            mov r3.xy, -r3.xyxx
                            add r2.xy, r2.xyxx, r3.xyxx
                            mov r3.x, -cb0[4].y
                            add r0.w, r0.w, r3.x
                            mov o0.xyz, r0.xyzx
                            mov o0.w, r0.w
                            mov o1.xy, r2.xyxx
                            mov o1.zw, r2.zzzw
                            mov o2.x, r1.w
                            mov o3.xyz, r1.xyzx
                            emit 
                          endif 
        
        #line 417
                          nop 
                        endif 
                      endif 
                    endif 
                  endif 
                endif 
              endif 
            endif 
          endif 
        endif 
        ret 
        // Approximately 504 instruction slots used
            
    }
/* Stream out decl: "POSITION.xyz; VELOCITY.xy; SIZE.xy; TIMER.x; EMITTER_INTERVAL.x; TYPE.x; ETYPE.x; TEXINDEX.x" */;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 UpdateParticles
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // VELOCITY                 0   xy          1     NONE   float   xy  
                // SIZE                     0   xy          2     NONE   float   xy  
                // TIMER                    0   x           3     NONE   float   x   
                // EMITTER_INTERVAL         0   x           4     NONE   float   x   
                // TYPE                     0   x           5     NONE    uint   x   
                // ETYPE                    0   x           6     NONE    uint   x   
                // TEXINDEX                 0   x           7     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TIMER                    0      w        0     NONE   float      w
                // VELOCITY                 0   xy          1     NONE   float   xy  
                // SIZE                     0     zw        1     NONE   float     zw
                // EMITTER_INTERVAL         0   x           2     NONE   float   x   
                // TYPE                     0   x           3     NONE    uint   x   
                // ETYPE                    0    y          3     NONE    uint    y  
                // TEXINDEX                 0     z         3     NONE    uint     z 
                //
                vs_4_0
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_input v3.x
                dcl_input v4.x
                dcl_input v5.x
                dcl_input v6.x
                dcl_input v7.x
                dcl_output o0.xyz
                dcl_output o0.w
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_output o2.x
                dcl_output o3.x
                dcl_output o3.y
                dcl_output o3.z
                //
                // Initial variable locations:
                //   v0.x <- input.pos.x; v0.y <- input.pos.y; v0.z <- input.pos.z; 
                //   v1.x <- input.vel.x; v1.y <- input.vel.y; 
                //   v2.x <- input.size.x; v2.y <- input.size.y; 
                //   v3.x <- input.timer; 
                //   v4.x <- input.emitInterval; 
                //   v5.x <- input.type; 
                //   v6.x <- input.etype; 
                //   v7.x <- input.texIndex; 
                //   o3.x <- <VSUpdateMain return value>.type; o3.y <- <VSUpdateMain return value>.etype; o3.z <- <VSUpdateMain return value>.texIndex; 
                //   o2.x <- <VSUpdateMain return value>.emitInterval; 
                //   o1.x <- <VSUpdateMain return value>.vel.x; o1.y <- <VSUpdateMain return value>.vel.y; o1.z <- <VSUpdateMain return value>.size.x; o1.w <- <VSUpdateMain return value>.size.y; 
                //   o0.x <- <VSUpdateMain return value>.pos.x; o0.y <- <VSUpdateMain return value>.pos.y; o0.z <- <VSUpdateMain return value>.pos.z; o0.w <- <VSUpdateMain return value>.timer
                //
                #line 205 "G:\Personal\Crusade\Final Src\Common\FX\Particles.fx"
                mov o0.xyz, v0.xyzx
                mov o1.xy, v1.xyxx
                mov o1.zw, v2.xxxy
                mov o0.w, v3.x
                mov o2.x, v4.x
                mov o3.x, v5.x
                mov o3.y, v6.x
                mov o3.z, v7.x
                ret 
                // Approximately 9 instruction slots used
                            
            };
            GeometryShader = gsStreamOut;
            PixelShader = NULL;
            DS_StencilRef = uint(0);
            DepthStencilState = DisableDepth;
        }

    }

    technique11 DrawParticles
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xy  
                // VELOCITY                 0   xy          1     NONE   float       
                // SIZE                     0   xy          2     NONE   float   xy  
                // TIMER                    0   x           3     NONE   float       
                // EMITTER_INTERVAL         0   x           4     NONE   float       
                // TYPE                     0   x           5     NONE    uint   x   
                // ETYPE                    0   x           6     NONE    uint       
                // TEXINDEX                 0   x           7     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // SIZE                     0   xy          1     NONE   float   xy  
                // TEXCOORD                 0     zw        1     NONE   float     zw
                // TEXINDEX                 0   x           2     NONE    uint   x   
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                //
                vs_4_0
                dcl_input v0.xy
                dcl_input v2.xy
                dcl_input v5.x
                dcl_input v7.x
                dcl_output o0.xyzw
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_output o2.x
                dcl_output o3.xyzw
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- input.pos.x; v0.y <- input.pos.y; v0.z <- input.pos.z; 
                //   v1.x <- input.vel.x; v1.y <- input.vel.y; 
                //   v2.x <- input.size.x; v2.y <- input.size.y; 
                //   v3.x <- input.timer; 
                //   v4.x <- input.emitInterval; 
                //   v5.x <- input.type; 
                //   v6.x <- input.etype; 
                //   v7.x <- input.texIndex; 
                //   o3.x <- <VSDrawMain return value>.color.x; o3.y <- <VSDrawMain return value>.color.y; o3.z <- <VSDrawMain return value>.color.z; o3.w <- <VSDrawMain return value>.color.w; 
                //   o2.x <- <VSDrawMain return value>.texIndex; 
                //   o1.x <- <VSDrawMain return value>.size.x; o1.y <- <VSDrawMain return value>.size.y; o1.z <- <VSDrawMain return value>.texCoords.x; o1.w <- <VSDrawMain return value>.texCoords.y; 
                //   o0.x <- <VSDrawMain return value>.pos.x; o0.y <- <VSDrawMain return value>.pos.y; o0.z <- <VSDrawMain return value>.pos.z; o0.w <- <VSDrawMain return value>.pos.w
                //
                #line 142 "G:\Personal\Crusade\Final Src\Common\FX\Particles.fx"
                itof r0.xyzw, l(0, 0, 0, 0)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                itof r1.xyzw, l(0, 0, 0, 0)  // r1.x <- output.color.x; r1.y <- output.color.y; r1.z <- output.color.z; r1.w <- output.color.w
                itof r2.xy, l(0, 0, 0, 0)  // r2.x <- output.texCoords.x; r2.y <- output.texCoords.y
                mov r2.zw, v2.xxxy  // r2.z <- output.size.x; r2.w <- output.size.y
                mov r3.x, l(10)
                ieq r3.x, r3.x, v5.x
                if_nz r3.x
                  itof r0.zw, l(0, 0, 1, 0)
                  mov r0.xy, v0.xyxx
                  mov r1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                else 
                  mov r3.x, l(1)
                  ieq r3.x, r3.x, v5.x
                  if_nz r3.x
                
                #line 153
                    itof r0.zw, l(0, 0, 1, 0)
                    mov r0.xy, v0.xyxx
                    mov r1.xyzw, l(1.000000,0,0,1.000000)
                  else 
                    mov r3.x, l(2)
                    ieq r3.x, r3.x, v5.x
                    if_nz r3.x
                      itof r0.zw, l(0, 0, 1, 0)
                      mov r0.xy, v0.xyxx
                      mov r1.xyzw, l(0,0,1.000000,1.000000)
                    else 
                      mov r3.x, l(3)
                      ieq r3.x, r3.x, v5.x
                      if_nz r3.x
                
                #line 165
                        itof r0.zw, l(0, 0, 1, 0)
                        mov r0.xy, v0.xyxx
                        mov r1.xyzw, l(0.250000,0.250000,0.250000,0.750000)
                      else 
                        mov r3.x, l(4)
                        ieq r3.x, r3.x, v5.x
                        if_nz r3.x
                          itof r0.zw, l(0, 0, 1, 0)
                          mov r0.xy, v0.xyxx
                          mov r1.xyzw, l(1.000000,1.000000,0,0.750000)
                        else 
                          mov r3.x, l(5)
                          ieq r3.x, r3.x, v5.x
                          if_nz r3.x
                
                #line 177
                            itof r0.zw, l(0, 0, 0, 0)
                            mov r0.xy, v0.xyxx
                            mov r2.xy, l(0.750000,0.750000,0,0)
                            mov r1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                          else 
                            mov r3.x, l(6)
                            ieq r3.x, r3.x, v5.x
                            if_nz r3.x
                              itof r0.zw, l(0, 0, 1, 0)
                              mov r0.xy, v0.xyxx
                              mov r1.xyzw, l(1.000000,0,0,1.000000)
                            else 
                              mov r3.x, l(7)
                              ieq r3.x, r3.x, v5.x
                              if_nz r3.x
                
                #line 189
                                itof r0.zw, l(0, 0, 1, 0)
                                mov r0.xy, v0.xyxx
                                mov r1.xyzw, l(0,1.000000,0.300000,1.000000)
                              else 
                                mov r3.x, l(8)
                                ieq r3.x, r3.x, v5.x
                                if_nz r3.x
                                  itof r0.zw, l(0, 0, 1, 0)
                                  mov r0.xy, v0.xyxx
                                  mov r1.xyzw, l(0.930000,0.790000,0,1.000000)
                                endif 
                              endif 
                            endif 
                          endif 
                        endif 
                      endif 
                    endif 
                  endif 
                endif 
                mov r3.x, v7.x  // r3.x <- output.texIndex
                
                #line 200
                mov o0.xyzw, r0.xyzw
                mov o1.xy, r2.zwzz
                mov o1.zw, r2.xxxy
                mov o3.xyzw, r1.xyzw
                mov o2.x, r3.x
                ret 
                // Approximately 83 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer perDraw
                // {
                //
                //   float4x4 gWorldViewProj;           // Offset:    0 Size:    64
                //   float gGlobalTime;                 // Offset:   64 Size:     4 [unused]
                //   float gElapsedTime;                // Offset:   68 Size:     4 [unused]
                //   float4 gGravity;                   // Offset:   80 Size:    16 [unused]
                //   float gBloodParticleSize;          // Offset:   96 Size:     4 [unused]
                //      = 0x3ca3d70a 
                //
                // }
                //
                // cbuffer cFixed
                // {
                //
                //   float gLifeTimes[9];               // Offset:    0 Size:   132 [unused]
                //      = 0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x40400000 0x00000000 0x00000000 0x00000000 
                //        0x40000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3f4ccccd 
                //   float3 gPositions[4];              // Offset:  144 Size:    60
                //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0xbf800000 0xbf800000 0x00000000 0x00000000 
                //        0x3f800000 0xbf800000 0x00000000 
                //   float2 gTexCoords[4];              // Offset:  208 Size:    56
                //      = 0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // perDraw                           cbuffer      NA          NA    0        1
                // cFixed                            cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // TEXCOORD                 0     zw        1     NONE   float     zw
                // TEXINDEX                 0   x           2     NONE    uint   x   
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXTURE                  0   xy          1     NONE   float   xy  
                // TEXINDEX                 0     z         1     NONE   float     z 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                gs_4_0
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[17], dynamicIndexed
                dcl_input v[1][0].xyzw
                dcl_input v[1][1].xy
                dcl_input v[1][1].zw
                dcl_input v[1][2].x
                dcl_input v[1][3].xyzw
                dcl_temps 4
                dcl_inputprimitive point 
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o1.z
                dcl_output o2.xyzw
                dcl_maxout 4
                //
                // Initial variable locations:
                //   m0 <- SpriteStream; 
                //   v[0][0].x <- input[0].pos.x; v[0][0].y <- input[0].pos.y; v[0][0].z <- input[0].pos.z; v[0][0].w <- input[0].pos.w; 
                //   v[0][1].x <- input[0].size.x; v[0][1].y <- input[0].size.y; v[0][1].z <- input[0].texCoords.x; v[0][1].w <- input[0].texCoords.y; 
                //   v[0][2].x <- input[0].texIndex; 
                //   v[0][3].x <- input[0].color.x; v[0][3].y <- input[0].color.y; v[0][3].z <- input[0].color.z; v[0][3].w <- input[0].color.w
                //
                #line 425 "G:\Personal\Crusade\Final Src\Common\FX\Particles.fx"
                mov r0.x, l(0)  // r0.x <- i
                mov r0.y, r0.x  // r0.y <- i
                loop 
                  ilt r0.z, r0.y, l(4)
                  breakc_z r0.z
                  mul r1.xy, v[0][1].xyxx, cb1[r0.y + 9].xyxx  // r1.x <- position.x; r1.y <- position.y
                  itof r1.z, l(0)  // r1.z <- position.z
                  add r1.xyz, r1.xyzx, v[0][0].xyzx
                  mov r1.w, l(1.000000)
                  dp4 r2.x, r1.xyzw, cb0[0].xyzw  // r2.x <- output.pos.x
                  dp4 r2.y, r1.xyzw, cb0[1].xyzw  // r2.y <- output.pos.y
                  dp4 r2.z, r1.xyzw, cb0[3].xyzw  // r2.z <- output.pos.w
                  mov r0.z, v[0][0].z  // r0.z <- output.pos.z
                  utof r0.w, v[0][2].x  // r0.w <- output.texIndex
                  mov r1.xyzw, v[0][3].xyzw  // r1.x <- output.color.x; r1.y <- output.color.y; r1.z <- output.color.z; r1.w <- output.color.w
                  mul r3.xy, v[0][1].zwzz, cb1[r0.y + 13].xyxx  // r3.x <- output.tex.x; r3.y <- output.tex.y
                  mov o0.xyw, r2.xyxz
                  mov o0.z, r0.z
                  mov o1.xy, r3.xyxx
                  mov o1.z, r0.w
                  mov o2.xyzw, r1.xyzw
                  emit 
                
                #line 436
                  iadd r0.y, r0.y, l(1)
                endloop 
                cut 
                ret 
                // Approximately 26 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // gSamPoint                         sampler      NA          NA    0        1
                // gDiffuseMaps                      texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float     z 
                // TEXTURE                  0   xy          1     NONE   float   xy  
                // TEXINDEX                 0     z         1     NONE   float     z 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_4_0
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps_siv linear noperspective v0.z, position
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v1.z
                dcl_input_ps linear v2.xyzw
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.pos.x; v0.y <- input.pos.y; v0.z <- input.pos.z; v0.w <- input.pos.w; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; v1.z <- input.texIndex; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   o0.x <- <PSDrawMain return value>.x; o0.y <- <PSDrawMain return value>.y; o0.z <- <PSDrawMain return value>.z; o0.w <- <PSDrawMain return value>.w
                //
                #line 448 "G:\Personal\Crusade\Final Src\Common\FX\Particles.fx"
                mov r0.xyzw, v0.zzzz  // r0.x <- zVect.x; r0.y <- zVect.y; r0.z <- zVect.z; r0.w <- zVect.w
                sample r1.xyzw, v1.xyzx, t0.xyzw, s0
                max r0.xyzw, r0.xyzw, r1.xyzw
                mul o0.xyzw, r0.xyzw, v2.xyzw
                ret 
                // Approximately 5 instruction slots used
                            
            };
            DS_StencilRef = uint(0);
            DepthStencilState = DisableDepth;
            RasterizerState = rastCullNone;
        }

    }

}

