//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer perObject
{
    float4x4 gWorldViewProj;            // Offset:    0, size:   64
    float4x4 gWorld;                    // Offset:   64, size:   64
    float4  gColorCorrect;              // Offset:  128, size:   16
}

cbuffer cbFixed
{
    float2  gTexCoords[4] = { 0, 0, 1, 0, 0, 1, 1, 1 };// Offset:    0, size:   56
}

//
// 4 local object(s)
//
Texture2DArray gDiffuseMaps;
SamplerState samPoint
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(CLAMP /* 3 */);
};
RasterizerState rastCullNone
{
    CullMode = uint(NONE /* 1 */);
};
DepthStencilState depthDisable
{
    DepthEnable = bool(FALSE /* false */);
    DepthWriteMask = uint(ZERO /* 0 */);
    StencilEnable = bool(FALSE /* false */);
    StencilReadMask = byte(0xff);
    StencilWriteMask = byte(0xff);
    FrontFaceStencilFunc = uint(ALWAYS /* 8 */);
    FrontFaceStencilPass = uint(INCR /* 7 */);
    FrontFaceStencilFail = uint(KEEP /* 1 */);
    BackFaceStencilFunc = uint(ALWAYS /* 8 */);
    BackFaceStencilPass = uint(INCR /* 7 */);
    BackFaceStencilFail = uint(KEEP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 SpriteTech
    {
        pass P0
        {
            RasterizerState = rastCullNone;
            DS_StencilRef = uint(0);
            DepthStencilState = depthDisable;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // ROTATION                 0   x           2     NONE   float   x   
                // TEXINDEX                 0   x           3     NONE    uint   x   
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // ROTATION                 0     z         1     NONE   float     z 
                // TEXINDEX                 0   x           2     NONE    uint   x   
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.x
                dcl_input v3.x
                dcl_input v4.xyzw
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.z
                dcl_output o2.x
                dcl_output o3.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.Size.x; v1.y <- vin.Size.y; 
                //   v2.x <- vin.Rotation; 
                //   v3.x <- vin.TexIndex; 
                //   v4.x <- vin.Color.x; v4.y <- vin.Color.y; v4.z <- vin.Color.z; v4.w <- vin.Color.w; 
                //   o3.x <- <VS return value>.Color.x; o3.y <- <VS return value>.Color.y; o3.z <- <VS return value>.Color.z; o3.w <- <VS return value>.Color.w; 
                //   o2.x <- <VS return value>.TexIndex; 
                //   o1.x <- <VS return value>.Size.x; o1.y <- <VS return value>.Size.y; o1.z <- <VS return value>.Rotation; 
                //   o0.x <- <VS return value>.PosL.x; o0.y <- <VS return value>.PosL.y; o0.z <- <VS return value>.PosL.z
                //
                #line 86 "G:\Personal\Crusade\Final Src\Common\FX\Texture.fx"
                mov r0.xyz, v0.xyzx  // r0.x <- tout.PosL.x; r0.y <- tout.PosL.y; r0.z <- tout.PosL.z
                mov r1.xy, v1.xyxx  // r1.x <- tout.Size.x; r1.y <- tout.Size.y
                mov r0.w, v2.x  // r0.w <- tout.Rotation
                mov r1.z, v3.x  // r1.z <- tout.TexIndex
                mov r2.xyzw, v4.xyzw  // r2.x <- tout.Color.x; r2.y <- tout.Color.y; r2.z <- tout.Color.z; r2.w <- tout.Color.w
                mov o3.xyzw, r2.xyzw
                mov o0.xyz, r0.xyzx
                mov o1.xy, r1.xyxx
                mov o1.z, r0.w
                mov o2.x, r1.z
                ret 
                // Approximately 11 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer perObject
                // {
                //
                //   float4x4 gWorldViewProj;           // Offset:    0 Size:    64
                //   float4x4 gWorld;                   // Offset:   64 Size:    64 [unused]
                //   float4 gColorCorrect;              // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float2 gTexCoords[4];              // Offset:    0 Size:    56
                //      = 0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // perObject                         cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // ROTATION                 0     z         1     NONE   float     z 
                // TEXINDEX                 0   x           2     NONE    uint   x   
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // TEXINDEX                 0   x           2     NONE    uint   x   
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xy
                dcl_input v[1][1].z
                dcl_input v[1][2].x
                dcl_input v[1][3].xyzw
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.x
                dcl_output o3.xyzw
                dcl_maxout 4
                //
                // Initial variable locations:
                //   m0 <- triStream; 
                //   v[0][0].x <- gin[0].PosL.x; v[0][0].y <- gin[0].PosL.y; v[0][0].z <- gin[0].PosL.z; 
                //   v[0][1].x <- gin[0].Size.x; v[0][1].y <- gin[0].Size.y; v[0][1].z <- gin[0].Rotation; 
                //   v[0][2].x <- gin[0].TexIndex; 
                //   v[0][3].x <- gin[0].Color.x; v[0][3].y <- gin[0].Color.y; v[0][3].z <- gin[0].Color.z; v[0][3].w <- gin[0].Color.w; 
                //   x0 <- v
                //
                #line 99 "G:\Personal\Crusade\Final Src\Common\FX\Texture.fx"
                mov r0.x, v[0][1].z  // r0.x <- a
                
                #line 102
                add r1.y, v[0][0].y, v[0][1].y
                mov r1.xz, v[0][0].xxzx
                mov r1.w, l(1.000000)
                mov x0[0].xyzw, r1.xyzw
                add r1.x, v[0][0].x, v[0][1].x
                add r1.y, v[0][0].y, v[0][1].y
                mov x0[1].xyzw, r1.xyzw
                mov r1.xyz, v[0][0].xyzx
                mov r1.w, l(1.000000)
                mov x0[2].xyzw, r1.xyzw
                add r1.x, v[0][0].x, v[0][1].x
                mov x0[3].xyzw, r1.xyzw
                mov r0.y, x0[0].x
                itof r0.z, l(2)
                div r0.z, v[0][1].x, r0.z
                add r0.y, r0.z, r0.y  // r0.y <- c0.x
                mov r0.z, x0[0].y
                itof r0.w, l(2)
                div r0.w, v[0][1].y, r0.w
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z  // r0.z <- c0.y
                mov r0.w, x0[1].x
                itof r1.x, l(2)
                div r1.x, v[0][1].x, r1.x
                mov r1.x, -r1.x
                add r0.w, r0.w, r1.x  // r0.w <- c1.x
                mov r1.x, x0[1].y
                itof r1.y, l(2)
                div r1.y, v[0][1].y, r1.y
                mov r1.y, -r1.y
                add r1.x, r1.y, r1.x  // r1.x <- c1.y
                mov r1.y, x0[2].x
                itof r1.z, l(2)
                div r1.z, v[0][1].x, r1.z
                add r1.y, r1.z, r1.y  // r1.y <- c2.x
                mov r1.z, x0[2].y
                itof r1.w, l(2)
                div r1.w, v[0][1].y, r1.w
                add r1.z, r1.w, r1.z  // r1.z <- c2.y
                mov r1.w, x0[3].x
                itof r2.x, l(2)
                div r2.x, v[0][1].x, r2.x
                mov r2.x, -r2.x
                add r1.w, r1.w, r2.x  // r1.w <- c3.x
                mov r2.x, x0[3].y
                itof r2.y, l(2)
                div r2.y, v[0][1].y, r2.y
                add r2.x, r2.y, r2.x  // r2.x <- c3.y
                mov r2.y, x0[0].x
                mov r2.z, -r0.y
                add r2.y, r2.z, r2.y  // r2.y <- temp0.x
                mov r2.z, x0[0].y
                mov r2.w, -r0.z
                add r2.z, r2.w, r2.z  // r2.z <- temp0.y
                
                #line 113
                mov r2.w, x0[1].x
                mov r3.x, -r0.w
                add r2.w, r2.w, r3.x  // r2.w <- temp1.x
                mov r3.x, x0[1].y
                mov r3.y, -r1.x
                add r3.x, r3.y, r3.x  // r3.x <- temp1.y
                mov r3.y, x0[2].x
                mov r3.z, -r1.y
                add r3.y, r3.z, r3.y  // r3.y <- temp2.x
                mov r3.z, x0[2].y
                mov r3.w, -r1.z
                add r3.z, r3.w, r3.z  // r3.z <- temp2.y
                mov r3.w, x0[3].x
                mov r4.x, -r1.w
                add r3.w, r3.w, r4.x  // r3.w <- temp3.x
                mov r4.x, x0[3].y
                mov r4.y, -r2.x
                add r4.x, r4.y, r4.x  // r4.x <- temp3.y
                sincos null, r4.y, r0.x
                mul r4.y, r2.y, r4.y
                sincos r4.z, null, r0.x
                mul r4.z, r2.z, r4.z
                mov r4.z, -r4.z
                add r5.x, r4.z, r4.y
                sincos r4.y, null, r0.x
                mul r2.y, r2.y, r4.y
                sincos null, r4.y, r0.x
                mul r2.z, r2.z, r4.y
                add r5.y, r2.z, r2.y
                mov r5.zw, x0[0].zzzw
                mov x0[0].xyzw, r5.xyzw
                sincos null, r2.y, r0.x
                mul r2.y, r2.y, r2.w
                sincos r2.z, null, r0.x
                mul r2.z, r2.z, r3.x
                mov r2.z, -r2.z
                add r5.x, r2.z, r2.y
                sincos r2.y, null, r0.x
                mul r2.y, r2.y, r2.w
                sincos null, r2.z, r0.x
                mul r2.z, r2.z, r3.x
                add r5.y, r2.z, r2.y
                mov r5.zw, x0[1].zzzw
                mov x0[1].xyzw, r5.xyzw
                sincos null, r2.y, r0.x
                mul r2.y, r2.y, r3.y
                sincos r2.z, null, r0.x
                mul r2.z, r2.z, r3.z
                mov r2.z, -r2.z
                add r5.x, r2.z, r2.y
                sincos r2.y, null, r0.x
                mul r2.y, r2.y, r3.y
                sincos null, r2.z, r0.x
                mul r2.z, r2.z, r3.z
                add r5.y, r2.z, r2.y
                mov r5.zw, x0[2].zzzw
                mov x0[2].xyzw, r5.xyzw
                sincos null, r2.y, r0.x
                mul r2.y, r2.y, r3.w
                sincos r2.z, null, r0.x
                mul r2.z, r2.z, r4.x
                mov r2.z, -r2.z
                add r5.x, r2.z, r2.y
                sincos r2.y, null, r0.x
                mul r2.y, r2.y, r3.w
                sincos null, r0.x, r0.x
                mul r0.x, r0.x, r4.x
                add r5.y, r0.x, r2.y
                mov r5.zw, x0[3].zzzw
                mov x0[3].xyzw, r5.xyzw
                mov r0.x, x0[0].x
                add r3.x, r0.y, r0.x
                mov r0.x, x0[0].y
                add r3.y, r0.z, r0.x
                mov r3.zw, x0[0].zzzw
                mov x0[0].xyzw, r3.xyzw
                mov r0.x, x0[1].x
                add r0.x, r0.w, r0.x
                mov r2.y, x0[1].y
                add r0.y, r1.x, r2.y
                mov r0.zw, x0[1].zzzw
                mov x0[1].xyzw, r0.xyzw
                
                #line 124
                mov r0.x, x0[2].x
                add r0.x, r1.y, r0.x
                mov r1.x, x0[2].y
                add r0.y, r1.z, r1.x
                mov r0.zw, x0[2].zzzw
                mov x0[2].xyzw, r0.xyzw
                mov r0.x, x0[3].x
                add r0.x, r1.w, r0.x
                mov r1.x, x0[3].y
                add r0.y, r2.x, r1.x
                mov r0.zw, x0[3].zzzw
                mov x0[3].xyzw, r0.xyzw
                
                #line 131
                mov r0.xyzw, x0[0].xyzw
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vout.PosH.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vout.PosH.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vout.PosH.z
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- vout.PosH.w
                mov r0.xy, cb1[0].xyxx  // r0.x <- vout.Tex.x; r0.y <- vout.Tex.y
                mov r0.z, v[0][2].x  // r0.z <- vout.TexIndex
                mov r2.xyzw, v[0][3].xyzw  // r2.x <- vout.Color.x; r2.y <- vout.Color.y; r2.z <- vout.Color.z; r2.w <- vout.Color.w
                mov o0.xyzw, r1.xyzw
                mov o1.xy, r0.xyxx
                mov o2.x, r0.z
                mov o3.xyzw, r2.xyzw
                emit_stream m0
                
                #line 131
                mov r0.xyzw, x0[1].xyzw
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp4 r1.w, r0.xyzw, cb0[3].xyzw
                mov r0.xy, cb1[1].xyxx  // r0.x <- vout.Tex.x; r0.y <- vout.Tex.y
                mov r0.z, v[0][2].x  // r0.z <- vout.TexIndex
                mov r2.xyzw, v[0][3].xyzw
                mov o0.xyzw, r1.xyzw
                mov o1.xy, r0.xyxx
                mov o2.x, r0.z
                mov o3.xyzw, r2.xyzw
                emit_stream m0
                
                #line 131
                mov r0.xyzw, x0[2].xyzw
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp4 r1.w, r0.xyzw, cb0[3].xyzw
                mov r0.xy, cb1[2].xyxx  // r0.x <- vout.Tex.x; r0.y <- vout.Tex.y
                mov r0.z, v[0][2].x  // r0.z <- vout.TexIndex
                mov r2.xyzw, v[0][3].xyzw
                mov o0.xyzw, r1.xyzw
                mov o1.xy, r0.xyxx
                mov o2.x, r0.z
                mov o3.xyzw, r2.xyzw
                emit_stream m0
                
                #line 131
                mov r0.xyzw, x0[3].xyzw
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp4 r1.w, r0.xyzw, cb0[3].xyzw
                mov r0.xy, cb1[3].xyxx  // r0.x <- vout.Tex.x; r0.y <- vout.Tex.y
                mov r0.z, v[0][2].x  // r0.z <- vout.TexIndex
                mov r2.xyzw, v[0][3].xyzw
                mov o0.xyzw, r1.xyzw
                mov o1.xy, r0.xyxx
                mov o2.x, r0.z
                mov o3.xyzw, r2.xyzw
                emit_stream m0
                
                #line 139
                ret 
                // Approximately 202 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer perObject
                // {
                //
                //   float4x4 gWorldViewProj;           // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorld;                   // Offset:   64 Size:    64 [unused]
                //   float4 gColorCorrect;              // Offset:  128 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samPoint                          sampler      NA          NA    0        1
                // gDiffuseMaps                      texture  float4     2darray    0        1
                // perObject                         cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // TEXINDEX                 0   x           2     NONE    uint   x   
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_input_ps constant v2.x
                dcl_input_ps linear v3.xyzw
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.Tex.x; v1.y <- pin.Tex.y; 
                //   v2.x <- pin.TexIndex; 
                //   v3.x <- pin.Color.x; v3.y <- pin.Color.y; v3.z <- pin.Color.z; v3.w <- pin.Color.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 143 "G:\Personal\Crusade\Final Src\Common\FX\Texture.fx"
                utof r0.z, v2.x
                mov r0.xy, v1.xyxx
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, r0.xyzx, t0.xyzw, s0
                mul r0.xyzw, r0.xyzw, v3.xyzw
                mul o0.xyzw, r0.xyzw, cb0[8].xyzw
                ret 
                // Approximately 6 instruction slots used
                            
            };
        }

    }

    technique11 ColorBoxTech
    {
        pass P0
        {
            RasterizerState = rastCullNone;
            DS_StencilRef = uint(0);
            DepthStencilState = depthDisable;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // ROTATION                 0   x           2     NONE   float   x   
                // TEXINDEX                 0   x           3     NONE    uint   x   
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // ROTATION                 0     z         1     NONE   float     z 
                // TEXINDEX                 0   x           2     NONE    uint   x   
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.x
                dcl_input v3.x
                dcl_input v4.xyzw
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.z
                dcl_output o2.x
                dcl_output o3.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.Size.x; v1.y <- vin.Size.y; 
                //   v2.x <- vin.Rotation; 
                //   v3.x <- vin.TexIndex; 
                //   v4.x <- vin.Color.x; v4.y <- vin.Color.y; v4.z <- vin.Color.z; v4.w <- vin.Color.w; 
                //   o3.x <- <VS return value>.Color.x; o3.y <- <VS return value>.Color.y; o3.z <- <VS return value>.Color.z; o3.w <- <VS return value>.Color.w; 
                //   o2.x <- <VS return value>.TexIndex; 
                //   o1.x <- <VS return value>.Size.x; o1.y <- <VS return value>.Size.y; o1.z <- <VS return value>.Rotation; 
                //   o0.x <- <VS return value>.PosL.x; o0.y <- <VS return value>.PosL.y; o0.z <- <VS return value>.PosL.z
                //
                #line 86 "G:\Personal\Crusade\Final Src\Common\FX\Texture.fx"
                mov r0.xyz, v0.xyzx  // r0.x <- tout.PosL.x; r0.y <- tout.PosL.y; r0.z <- tout.PosL.z
                mov r1.xy, v1.xyxx  // r1.x <- tout.Size.x; r1.y <- tout.Size.y
                mov r0.w, v2.x  // r0.w <- tout.Rotation
                mov r1.z, v3.x  // r1.z <- tout.TexIndex
                mov r2.xyzw, v4.xyzw  // r2.x <- tout.Color.x; r2.y <- tout.Color.y; r2.z <- tout.Color.z; r2.w <- tout.Color.w
                mov o3.xyzw, r2.xyzw
                mov o0.xyz, r0.xyzx
                mov o1.xy, r1.xyxx
                mov o1.z, r0.w
                mov o2.x, r1.z
                ret 
                // Approximately 11 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer perObject
                // {
                //
                //   float4x4 gWorldViewProj;           // Offset:    0 Size:    64
                //   float4x4 gWorld;                   // Offset:   64 Size:    64 [unused]
                //   float4 gColorCorrect;              // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float2 gTexCoords[4];              // Offset:    0 Size:    56
                //      = 0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // perObject                         cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // ROTATION                 0     z         1     NONE   float     z 
                // TEXINDEX                 0   x           2     NONE    uint   x   
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // TEXINDEX                 0   x           2     NONE    uint   x   
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xy
                dcl_input v[1][1].z
                dcl_input v[1][2].x
                dcl_input v[1][3].xyzw
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.x
                dcl_output o3.xyzw
                dcl_maxout 4
                //
                // Initial variable locations:
                //   m0 <- triStream; 
                //   v[0][0].x <- gin[0].PosL.x; v[0][0].y <- gin[0].PosL.y; v[0][0].z <- gin[0].PosL.z; 
                //   v[0][1].x <- gin[0].Size.x; v[0][1].y <- gin[0].Size.y; v[0][1].z <- gin[0].Rotation; 
                //   v[0][2].x <- gin[0].TexIndex; 
                //   v[0][3].x <- gin[0].Color.x; v[0][3].y <- gin[0].Color.y; v[0][3].z <- gin[0].Color.z; v[0][3].w <- gin[0].Color.w; 
                //   x0 <- v
                //
                #line 99 "G:\Personal\Crusade\Final Src\Common\FX\Texture.fx"
                mov r0.x, v[0][1].z  // r0.x <- a
                
                #line 102
                add r1.y, v[0][0].y, v[0][1].y
                mov r1.xz, v[0][0].xxzx
                mov r1.w, l(1.000000)
                mov x0[0].xyzw, r1.xyzw
                add r1.x, v[0][0].x, v[0][1].x
                add r1.y, v[0][0].y, v[0][1].y
                mov x0[1].xyzw, r1.xyzw
                mov r1.xyz, v[0][0].xyzx
                mov r1.w, l(1.000000)
                mov x0[2].xyzw, r1.xyzw
                add r1.x, v[0][0].x, v[0][1].x
                mov x0[3].xyzw, r1.xyzw
                mov r0.y, x0[0].x
                itof r0.z, l(2)
                div r0.z, v[0][1].x, r0.z
                add r0.y, r0.z, r0.y  // r0.y <- c0.x
                mov r0.z, x0[0].y
                itof r0.w, l(2)
                div r0.w, v[0][1].y, r0.w
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z  // r0.z <- c0.y
                mov r0.w, x0[1].x
                itof r1.x, l(2)
                div r1.x, v[0][1].x, r1.x
                mov r1.x, -r1.x
                add r0.w, r0.w, r1.x  // r0.w <- c1.x
                mov r1.x, x0[1].y
                itof r1.y, l(2)
                div r1.y, v[0][1].y, r1.y
                mov r1.y, -r1.y
                add r1.x, r1.y, r1.x  // r1.x <- c1.y
                mov r1.y, x0[2].x
                itof r1.z, l(2)
                div r1.z, v[0][1].x, r1.z
                add r1.y, r1.z, r1.y  // r1.y <- c2.x
                mov r1.z, x0[2].y
                itof r1.w, l(2)
                div r1.w, v[0][1].y, r1.w
                add r1.z, r1.w, r1.z  // r1.z <- c2.y
                mov r1.w, x0[3].x
                itof r2.x, l(2)
                div r2.x, v[0][1].x, r2.x
                mov r2.x, -r2.x
                add r1.w, r1.w, r2.x  // r1.w <- c3.x
                mov r2.x, x0[3].y
                itof r2.y, l(2)
                div r2.y, v[0][1].y, r2.y
                add r2.x, r2.y, r2.x  // r2.x <- c3.y
                mov r2.y, x0[0].x
                mov r2.z, -r0.y
                add r2.y, r2.z, r2.y  // r2.y <- temp0.x
                mov r2.z, x0[0].y
                mov r2.w, -r0.z
                add r2.z, r2.w, r2.z  // r2.z <- temp0.y
                
                #line 113
                mov r2.w, x0[1].x
                mov r3.x, -r0.w
                add r2.w, r2.w, r3.x  // r2.w <- temp1.x
                mov r3.x, x0[1].y
                mov r3.y, -r1.x
                add r3.x, r3.y, r3.x  // r3.x <- temp1.y
                mov r3.y, x0[2].x
                mov r3.z, -r1.y
                add r3.y, r3.z, r3.y  // r3.y <- temp2.x
                mov r3.z, x0[2].y
                mov r3.w, -r1.z
                add r3.z, r3.w, r3.z  // r3.z <- temp2.y
                mov r3.w, x0[3].x
                mov r4.x, -r1.w
                add r3.w, r3.w, r4.x  // r3.w <- temp3.x
                mov r4.x, x0[3].y
                mov r4.y, -r2.x
                add r4.x, r4.y, r4.x  // r4.x <- temp3.y
                sincos null, r4.y, r0.x
                mul r4.y, r2.y, r4.y
                sincos r4.z, null, r0.x
                mul r4.z, r2.z, r4.z
                mov r4.z, -r4.z
                add r5.x, r4.z, r4.y
                sincos r4.y, null, r0.x
                mul r2.y, r2.y, r4.y
                sincos null, r4.y, r0.x
                mul r2.z, r2.z, r4.y
                add r5.y, r2.z, r2.y
                mov r5.zw, x0[0].zzzw
                mov x0[0].xyzw, r5.xyzw
                sincos null, r2.y, r0.x
                mul r2.y, r2.y, r2.w
                sincos r2.z, null, r0.x
                mul r2.z, r2.z, r3.x
                mov r2.z, -r2.z
                add r5.x, r2.z, r2.y
                sincos r2.y, null, r0.x
                mul r2.y, r2.y, r2.w
                sincos null, r2.z, r0.x
                mul r2.z, r2.z, r3.x
                add r5.y, r2.z, r2.y
                mov r5.zw, x0[1].zzzw
                mov x0[1].xyzw, r5.xyzw
                sincos null, r2.y, r0.x
                mul r2.y, r2.y, r3.y
                sincos r2.z, null, r0.x
                mul r2.z, r2.z, r3.z
                mov r2.z, -r2.z
                add r5.x, r2.z, r2.y
                sincos r2.y, null, r0.x
                mul r2.y, r2.y, r3.y
                sincos null, r2.z, r0.x
                mul r2.z, r2.z, r3.z
                add r5.y, r2.z, r2.y
                mov r5.zw, x0[2].zzzw
                mov x0[2].xyzw, r5.xyzw
                sincos null, r2.y, r0.x
                mul r2.y, r2.y, r3.w
                sincos r2.z, null, r0.x
                mul r2.z, r2.z, r4.x
                mov r2.z, -r2.z
                add r5.x, r2.z, r2.y
                sincos r2.y, null, r0.x
                mul r2.y, r2.y, r3.w
                sincos null, r0.x, r0.x
                mul r0.x, r0.x, r4.x
                add r5.y, r0.x, r2.y
                mov r5.zw, x0[3].zzzw
                mov x0[3].xyzw, r5.xyzw
                mov r0.x, x0[0].x
                add r3.x, r0.y, r0.x
                mov r0.x, x0[0].y
                add r3.y, r0.z, r0.x
                mov r3.zw, x0[0].zzzw
                mov x0[0].xyzw, r3.xyzw
                mov r0.x, x0[1].x
                add r0.x, r0.w, r0.x
                mov r2.y, x0[1].y
                add r0.y, r1.x, r2.y
                mov r0.zw, x0[1].zzzw
                mov x0[1].xyzw, r0.xyzw
                
                #line 124
                mov r0.x, x0[2].x
                add r0.x, r1.y, r0.x
                mov r1.x, x0[2].y
                add r0.y, r1.z, r1.x
                mov r0.zw, x0[2].zzzw
                mov x0[2].xyzw, r0.xyzw
                mov r0.x, x0[3].x
                add r0.x, r1.w, r0.x
                mov r1.x, x0[3].y
                add r0.y, r2.x, r1.x
                mov r0.zw, x0[3].zzzw
                mov x0[3].xyzw, r0.xyzw
                
                #line 131
                mov r0.xyzw, x0[0].xyzw
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vout.PosH.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vout.PosH.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vout.PosH.z
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- vout.PosH.w
                mov r0.xy, cb1[0].xyxx  // r0.x <- vout.Tex.x; r0.y <- vout.Tex.y
                mov r0.z, v[0][2].x  // r0.z <- vout.TexIndex
                mov r2.xyzw, v[0][3].xyzw  // r2.x <- vout.Color.x; r2.y <- vout.Color.y; r2.z <- vout.Color.z; r2.w <- vout.Color.w
                mov o0.xyzw, r1.xyzw
                mov o1.xy, r0.xyxx
                mov o2.x, r0.z
                mov o3.xyzw, r2.xyzw
                emit_stream m0
                
                #line 131
                mov r0.xyzw, x0[1].xyzw
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp4 r1.w, r0.xyzw, cb0[3].xyzw
                mov r0.xy, cb1[1].xyxx  // r0.x <- vout.Tex.x; r0.y <- vout.Tex.y
                mov r0.z, v[0][2].x  // r0.z <- vout.TexIndex
                mov r2.xyzw, v[0][3].xyzw
                mov o0.xyzw, r1.xyzw
                mov o1.xy, r0.xyxx
                mov o2.x, r0.z
                mov o3.xyzw, r2.xyzw
                emit_stream m0
                
                #line 131
                mov r0.xyzw, x0[2].xyzw
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp4 r1.w, r0.xyzw, cb0[3].xyzw
                mov r0.xy, cb1[2].xyxx  // r0.x <- vout.Tex.x; r0.y <- vout.Tex.y
                mov r0.z, v[0][2].x  // r0.z <- vout.TexIndex
                mov r2.xyzw, v[0][3].xyzw
                mov o0.xyzw, r1.xyzw
                mov o1.xy, r0.xyxx
                mov o2.x, r0.z
                mov o3.xyzw, r2.xyzw
                emit_stream m0
                
                #line 131
                mov r0.xyzw, x0[3].xyzw
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp4 r1.w, r0.xyzw, cb0[3].xyzw
                mov r0.xy, cb1[3].xyxx  // r0.x <- vout.Tex.x; r0.y <- vout.Tex.y
                mov r0.z, v[0][2].x  // r0.z <- vout.TexIndex
                mov r2.xyzw, v[0][3].xyzw
                mov o0.xyzw, r1.xyzw
                mov o1.xy, r0.xyxx
                mov o2.x, r0.z
                mov o3.xyzw, r2.xyzw
                emit_stream m0
                
                #line 139
                ret 
                // Approximately 202 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer perObject
                // {
                //
                //   float4x4 gWorldViewProj;           // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorld;                   // Offset:   64 Size:    64 [unused]
                //   float4 gColorCorrect;              // Offset:  128 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // perObject                         cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float       
                // TEXINDEX                 0   x           2     NONE    uint       
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_input_ps linear v3.xyzw
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.Tex.x; v1.y <- pin.Tex.y; 
                //   v2.x <- pin.TexIndex; 
                //   v3.x <- pin.Color.x; v3.y <- pin.Color.y; v3.z <- pin.Color.z; v3.w <- pin.Color.w; 
                //   o0.x <- <NoTexPS return value>.x; o0.y <- <NoTexPS return value>.y; o0.z <- <NoTexPS return value>.z; o0.w <- <NoTexPS return value>.w
                //
                #line 148 "G:\Personal\Crusade\Final Src\Common\FX\Texture.fx"
                mul o0.xyzw, v3.xyzw, cb0[8].xyzw
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

}

